"""
Chain Summary ‚Äî —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º Bitcoin.
"""

import requests
import argparse

def get_block(block_height):
    url = f"https://api.blockchair.com/bitcoin/raw/block/{block_height}"
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫ {block_height}")
    return r.json()["data"][str(block_height)]["decoded_raw_block"]

def summarize_range(start, end):
    total_fees = 0
    total_txs = 0
    block_count = 0

    print(f"üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ —Å {start} –ø–æ {end}")
    for height in range(start, end + 1):
        try:
            block = get_block(height)
            txs = block.get("tx", [])
            if not txs:
                continue

            fees = 0
            for tx in txs[1:]:  # exclude coinbase
                vin_sum = sum(inp.get("prevout", {}).get("value", 0) for inp in tx.get("vin", []) if "prevout" in inp)
                vout_sum = sum(out.get("value", 0) for out in tx.get("vout", []))
                fees += vin_sum - vout_sum

            print(f"‚õèÔ∏è –ë–ª–æ–∫ {height}: {len(txs)} TX | –ö–æ–º–∏—Å—Å–∏–∏: {fees} —Å–∞—Ç–æ—à–∏")
            total_fees += fees
            total_txs += len(txs)
            block_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è {e}")

    if block_count == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    print("\nüìà –ò–¢–û–ì–û:")
    print(f"üß± –ë–ª–æ–∫–æ–≤: {block_count}")
    print(f"üì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_txs}")
    print(f"üí∞ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {total_fees} —Å–∞—Ç–æ—à–∏")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ TX/–±–ª–æ–∫: {total_txs // block_count}")
    print(f"üí∏ –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è/–±–ª–æ–∫: {total_fees // block_count} —Å–∞—Ç–æ—à–∏")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Chain Summary ‚Äî –æ–±–∑–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–æ–≤.")
    parser.add_argument("start_block", type=int, help="–ù–æ–º–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞")
    parser.add_argument("end_block", type=int, help="–ù–æ–º–µ—Ä –∫–æ–Ω–µ—á–Ω–æ–≥–æ –±–ª–æ–∫–∞")
    args = parser.parse_args()

    summarize_range(args.start_block, args.end_block)
